# Generated by Django 5.1.6 on 2025-07-16 22:52

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import mptt.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('itemId', models.AutoField(primary_key=True, serialize=False)),
                ('serial_number', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('quantity', models.IntegerField(default=0)),
                ('location', models.CharField(max_length=255)),
                ('minimumStockLevel', models.IntegerField(default=0)),
                ('description', models.TextField(blank=True, default='', null=True)),
                ('status', models.CharField(blank=True, choices=[('Available', 'Available'), ('Critical', 'Critical')], default='Available', editable=False, max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Technician',
            fields=[
                ('Technicianid', models.AutoField(primary_key=True, serialize=False)),
                ('specialization', models.CharField(max_length=100, verbose_name='Specialization')),
                ('phonenumber', models.IntegerField()),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Technician',
                'verbose_name_plural': 'Technicians',
            },
        ),
        migrations.CreateModel(
            name='AssetType',
            fields=[
                ('assetid', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('level_indicator', models.CharField(blank=True, default=0, editable=False, max_length=100)),
                ('is_template', models.BooleanField(default=True, verbose_name='Is Template')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='Base.assettype')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Machine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Machine name')),
                ('serial_number', models.CharField(max_length=100, unique=True, verbose_name='serial number')),
                ('description', models.TextField(blank=True)),
                ('purchase_date', models.DateField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='machine_images/')),
                ('location', models.CharField(max_length=100)),
                ('is_template', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('Operational', 'Operational'), ('Under Maintenance', 'Under Maintenance'), ('Out of Order', 'Out of Order'), ('Retired', 'Retired')], default='Operational', max_length=20)),
                ('asset_class', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Base.assettype', verbose_name='Asset Type')),
                ('parent_machine', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_machines', to='Base.machine')),
            ],
            options={
                'verbose_name': 'Machine',
                'verbose_name_plural': 'Machines',
            },
        ),
        migrations.CreateModel(
            name='MaintenanceTask',
            fields=[
                ('task_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('failure_reason', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('scheduled_date', models.DateField(blank=True, null=True)),
                ('completed_date', models.DateTimeField(blank=True, null=True)),
                ('instructions', models.TextField(blank=True, null=True, verbose_name='Instructions')),
                ('machine_part', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Base.machine')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskInventoryUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_reserved', models.PositiveIntegerField(default=0, verbose_name='Quantity Reserved')),
                ('quantity_used', models.PositiveIntegerField(default=0, verbose_name='Quantity Used')),
                ('status', models.CharField(choices=[('reserved', 'Reserved'), ('partially_used', 'Partially Used'), ('fully_used', 'Fully Used'), ('returned', 'Returned')], default='reserved', max_length=15)),
                ('used_date', models.DateTimeField(auto_now_add=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Base.inventoryitem')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Base.maintenancetask')),
            ],
            options={
                'verbose_name_plural': 'Task Inventory Usages',
            },
        ),
        migrations.AddField(
            model_name='maintenancetask',
            name='inventory_items',
            field=models.ManyToManyField(blank=True, through='Base.TaskInventoryUsage', to='Base.inventoryitem'),
        ),
        migrations.AddField(
            model_name='maintenancetask',
            name='technician',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='Base.technician'),
        ),
        migrations.CreateModel(
            name='WorkOrder',
            fields=[
                ('work_order_id', models.AutoField(primary_key=True, serialize=False, verbose_name='Work Order ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('due_date', models.DateField()),
                ('status', models.CharField(choices=[('open', 'Open'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed'), ('closed', 'Closed')], default='open', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('estimated_duration', models.DurationField(blank=True, null=True)),
                ('actual_duration', models.DurationField(blank=True, null=True)),
                ('completion_notes', models.TextField(blank=True)),
                ('machine', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='Base.machine', verbose_name='Machine')),
                ('technician', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_work_orders', to='Base.technician')),
            ],
            options={
                'ordering': ['-created_date'],
            },
        ),
        migrations.AddField(
            model_name='maintenancetask',
            name='work_order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='Base.workorder'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('pending', 'Pending Approval'), ('inventory_manager', 'Inventory Manager'), ('maintenance_manager', 'Maintenance Manager'), ('system_admin', 'System Admin'), ('maintenance_technician', 'Maintenance Technician'), ('regular_employee', 'Regular Employee')], default='pending', max_length=50)),
                ('job_title', models.CharField(choices=[('inventory_manager', 'Inventory Manager'), ('maintenance_manager', 'Maintenance Manager'), ('maintenance_technician', 'Maintenance Technician'), ('regular_employee', 'Regular Employee')], max_length=50, null=True, verbose_name='Job Title')),
                ('last_activity', models.DateTimeField(blank=True, null=True)),
                ('image', models.ImageField(default='profile_pics/default.jpg', upload_to='profile_pics/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='WorkOrderClosingReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('closed_date', models.DateTimeField(auto_now_add=True)),
                ('report_content', models.JSONField()),
                ('notes', models.TextField(blank=True, null=True)),
                ('work_order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='closing_report', to='Base.workorder')),
                ('closed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='workorder',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_work_orders', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='technician',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='technician', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('message', models.CharField(max_length=255)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MachineFailure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('failure_date', models.DateTimeField(auto_now_add=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('work_order_created', models.BooleanField(default=False, verbose_name='Work Order Created')),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Base.machine')),
                ('reported_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reported_failures', to=settings.AUTH_USER_MODEL, verbose_name='Reported By')),
            ],
            options={
                'verbose_name': 'Machine Failure',
                'verbose_name_plural': 'Machine Failures',
            },
        ),
    ]
